'use server';

/**
 * @fileOverview An AI agent that diversifies investment portfolios based on real-time market data.
 *
 * - diversifyPortfolio - A function that handles the portfolio diversification process.
 * - DiversifyPortfolioInput - The input type for the diversifyPortfolio function.
 * - DiversifyPortfolioOutput - The return type for the diversifyPortfolio function.
 */

import {ai} from '@/ai/genkit';
import {getInstruments, getMarketData, getPositions} from '@/services/broker-api';
import {z} from 'genkit';

const DiversifyPortfolioInputSchema = z.object({
  riskTolerance: z
    .string()
    .describe(
      'The users risk tolerance. Acceptable values are: Low, Medium, High.'
    ),
  investmentAmount: z.number().describe('The total amount to invest.'),
});
export type DiversifyPortfolioInput = z.infer<typeof DiversifyPortfolioInputSchema>;

const DiversifyPortfolioOutputSchema = z.object({
  strategyExplanation: z
    .string()
    .describe('An explanation of the diversification strategy applied.'),
  portfolioAllocation: z.record(z.number()).describe('The recommended portfolio allocation.'),
});
export type DiversifyPortfolioOutput = z.infer<typeof DiversifyPortfolioOutputSchema>;

export async function diversifyPortfolio(input: DiversifyPortfolioInput): Promise<DiversifyPortfolioOutput> {
  return diversifyPortfolioFlow(input);
}

const diversifyPortfolioPrompt = ai.definePrompt({
  name: 'diversifyPortfolioPrompt',
  input: {
    schema: DiversifyPortfolioInputSchema,
  },
  output: {
    schema: DiversifyPortfolioOutputSchema,
  },
  prompt: `You are an expert financial advisor specializing in portfolio diversification.

  Based on the user's risk tolerance ({{{riskTolerance}}}) and investment amount ({{{investmentAmount}}}), recommend a portfolio allocation across different asset classes.

  Consider the current market conditions and provide a clear explanation of the diversification strategy applied.

  Here is data for the following instruments: {{instruments}}

  Here are the current positions: {{positions}}

  Return the result as a valid JSON object.
  `,
});

const diversifyPortfolioFlow = ai.defineFlow(
  {
    name: 'diversifyPortfolioFlow',
    inputSchema: DiversifyPortfolioInputSchema,
    outputSchema: DiversifyPortfolioOutputSchema,
  },
  async input => {
    const instruments = await getInstruments();
    const positions = await getPositions();

    const instrumentsWithMarketData = await Promise.all(
      instruments.map(async instrument => {
        const marketData = await getMarketData(instrument.ticker);
        return {...instrument, price: marketData.price};
      })
    );

    const {output} = await diversifyPortfolioPrompt({
      ...input,
      instruments: JSON.stringify(instrumentsWithMarketData),
      positions: JSON.stringify(positions),
    });

    return output!;
  }
);


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































